apply plugin: 'org.jetbrains.kotlin.multiplatform'

archivesBaseName = 'sqldelight-runtime'

// TODO work around for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
  compileClasspath
}

kotlin {
  sourceSets {
    commonMain {
      dependencies {
        implementation "co.touchlab.stately:stately:0.3.4-k1.3.0-a1"
        implementation deps.kotlin.stdlib.common
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
        implementation deps.kotlin.test.commonAnnotations
      }
    }
    /*jvmMain {
      dependencies {
        implementation deps.kotlin.stdlib.jdk
      }
    }
    jvmTest {
      dependencies {
        implementation deps.kotlin.test.junit
//        implementation project(':drivers:sqlite-driver')
      }
    }
    jsMain {
      dependencies {
        implementation deps.kotlin.stdlib.js
      }
    }
    jsTest {
      dependencies {
        implementation deps.kotlin.test.js
      }
    }*/
    nativeMain {
    }
    nativeTest {
    }
  }

  targets {
//    fromPreset(presets.jvm, 'jvm')
//    fromPreset(presets.js, 'js')
    fromPreset(presets.iosX64, 'iosX64')
    fromPreset(presets.iosArm64, 'iosArm64')
    fromPreset(presets.macosX64, 'macos')
    fromPreset(presets.iosArm32, 'iosArm32')
  }

  configure([targets.iosX64, targets.iosArm64, targets.iosArm32, targets.macos]) {
    compilations.main.source(sourceSets.nativeMain)
    compilations.test.source(sourceSets.nativeTest)
  }
}

// TODO tie this into the normal gradle-mvn-push script
apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
      "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
      "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

task emptySourcesJar(type: Jar) {
  classifier = 'sources'
}
task emptyJavadocJar(type: Jar) {
  classifier = 'javadoc'
}

//apply from: '../gradle/configpublish.gradle'

//signing {
//  required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//  sign(publishing.publications)
//}


publishing {
  publications.all {
    // Rewrite all artifacts from using the project name to just 'runtime'.
    artifactId = artifactId.replace(project.name, "runtime")

    artifact emptyJavadocJar

    pom.withXml {
      def root = asNode()

      root.children().last() + {
        resolveStrategy = Closure.DELEGATE_FIRST

        description POM_DESCRIPTION
        name POM_NAME
        url POM_URL
        licenses {
          license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
          }
        }
        scm {
          url POM_SCM_URL
          connection POM_SCM_CONNECTION
          developerConnection POM_SCM_DEV_CONNECTION
        }
        developers {
          developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
          }
        }
      }
    }
  }

  afterEvaluate {
    publications.getByName('kotlinMultiplatform') {
      // Source jars are only created for platforms, not the common artifact.
      artifact emptySourcesJar
    }
  }

  repositories {
    maven {
      url (project.hasProperty('j2objcMavenDeploy') ? project.property('j2objcMavenDeploy') : 'file://nope/')
    }
    /*maven {
      url isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
      credentials {
        username getRepositoryUsername()
        password getRepositoryPassword()
      }
    }*/
    maven {
      name 'test'
      url "file://${rootProject.buildDir}/localMaven"
    }
  }
}

afterEvaluate {
  // Alias the task names we use elsewhere to the new task names.
  tasks.create('install').dependsOn('publishKotlinMultiplatformPublicationToMavenLocal')
//  tasks.create('installLocally') {
//    dependsOn 'publishKotlinMultiplatformPublicationToTestRepository'
//    dependsOn 'publishJvmPublicationToTestRepository'
//    dependsOn 'publishJsPublicationToTestRepository'
//  }
  // NOTE: We do not alias uploadArchives because CI runs it on Linux and we only want to run it on Mac OS.
  //tasks.create('uploadArchives').dependsOn('publishKotlinMultiplatformPublicationToMavenRepository')
}
